// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum Role {
  OWNER
  GUEST
}

model User {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  email            String            @unique
  password         String
  role             Role
  propertyOwner    PropertyOwner?
  guest            Guest?
  chatParticipants ChatParticipant[]
  tokens           Token[]
}

model Property {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  description  String?
  address      String
  price        Float
  currency     String
  bedrooms     Int
  bathrooms    Int
  owner        PropertyOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  reservations Reservation[]
  chats        Chat[]
}

model PropertyOwner {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String     @unique
}

model Guest {
  id           String             @id @default(cuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String             @unique
  reservations GuestReservation[]
}

model GuestReservation {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  guest         Guest       @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId       String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId String
}

model Reservation {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  property   Property           @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  guestId    String
  checkIn    DateTime
  checkOut   DateTime
  total      Float
  currency   String
  guests     GuestReservation[]
}

model Chat {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  messages     Message[]
  property     Property?         @relation(fields: [propertyId], references: [id])
  propertyId   String?
  participants ChatParticipant[]
}

model ChatParticipant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  message   String
  read      Boolean  @default(false)
}
